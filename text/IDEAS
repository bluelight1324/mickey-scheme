RESEARCH

Research how different scheme projects have implemented

- Tail call elimination
  - Trampoline
  - Extended trampoline
  - Cheney on the MTA
  - etc.

- Garbage collection
  - Mark-and-sweep
  - Boehm GC
  - Generational
  - Incremental
  - Stop-the-world
  - No-GC
  - etc.

- How is collection handled with FFI

MARK-AND-SWEEP GC

- Simple stop, mark and sweep GC has three steps:
  - Mark all objects to 1
  - Traverse usage-graph from root and set all reached objects to 0
  - Collect all objects still set to 1

CONTINUATIONS

Choose between CPS-transform and several engine implementations

LINKED LIST IMPLEMENTATIONS

I think Clojure uses 64-ary trees, possibly due to the fact that these can
easily be accessed in parallel (see Guy L. Steele's talk on FORTRESS for
more info on this).

The old MIT schemes used unrolled linked lists.

HYGIENIC MACROS

Seems most implementations either to explicit or implicit renaming.

Would need to rewrite the way memory locations are referenced in Mickey.
Specifically, if a macro refers to (if ...) from (scheme base), then it
should *still* reference the very same if at point of usage, and not any
locally defined (if ...).

Also, it should be possible to inspect references using lexical scoping
rules so that references needn't be looked up every time a code is run. This
would also lead to significant speed increases (as was also noted in
Norvig's small implementation).

PARTIAL EVALUATION AND OPTIMIZATION

This is an optimization trick that has a lot of backing literature. Read up.

Can inline and optimize right down to primitive operations. But note that
sometimes several "competing" optimization techniques can lead to slower
code (simply needs experimentation).

Should also be possible to eliminate push-and-pop call conventions in
certain cases.

SIMD / SSE vector instructions

Should be possible to create a stand-alone library that performs very well
on numeric code. Perhaps we could use homogenous vectors (e.g., bytevectors)
to pass code to an SIMD/SSE engine? Could computations efficiently be
offloaded to the GPU?

CONSTANT FOLDING / COMPILE-TIME EXPANSION / EVAL-WHEN

It should be possible to create a system that inspects and expands code at
compile time as in:

  (format-string "Hello, ~s!\n" "world")
  => magic expansion based on knowledge of format-string
  (format-string (string-append "Hello, " "world" "!\n"))
  => more magic
  (format-string "Hello, world!\n")

It could be possible with some effort.

CREATE A PROFILER

At the moment, Mickey is way too slow for any profiler to make sense. But it
would be neat to have a good one that just injects code with some
AOP-system to inject profiler code directly into the code tree.

It should then be possible to report timings hierarchically, where each node
is the sum of its children.

VARIOUS STUFF TO LOOK INTO

- In main engine: Fast malloc, e.g. tcmalloc
- As a library: Fast hash tables (sparse/dense), there is a SRFI for that.
- libgmp for multi precision numbers
- libffi for external C-functions
- llvm for jit?
- libjit for jit?
- Qt interface
- libsdl interface
- OpenGL interface, via Qt or libsdl?

MAKE SOME FUN EXMAPLE APPS

- Mandelbrot that is not only in ASCII
- Is the THX deep note code available? Would be neat to port it to Scheme.
  Someone has done Â´this with SuperCollider:
  http://www.earslap.com/instruction/recreating-the-thx-deep-note
- Forth interpreter / parser-compiler
- Cellular automaton (rule 101)
- Some games (pacman, space invaders, asteroids)

These examples could potentially be written as step-by-step coding tutorials
for the most fun.

DOCUMENTATION / MAN PAGES

It's possible to do `man 3 ctime` for POSIX functions. Would be neat to be
able to do `man 3 assv` for instance, as well.

This should probably be a separate project; just copy definitions from the
R7RS report and put them into the corresponding man pages.
